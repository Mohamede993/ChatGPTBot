{"version":3,"sources":["Components/Top.jsx","Components/ChatBot.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Top","React","createElement","className","ChatBot","userInput","setUserInput","useState","messages","setMessages","map","message","index","key","style","textAlign","isUser","text","type","placeholder","aria-label","value","onChange","e","target","onClick","async","prevMessages","reply","axios","post","model","prompt","max_tokens","headers","Content-Type","Authorization","concat","data","choices","trim","error","console","id","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"0NA0BeA,MAvBf,WAEI,OACJC,IAAAC,cAAA,OAAKC,UAAU,aACXF,IAAAC,cAAA,OAAKC,UAAU,UAEZF,IAAAC,cAAA,OAAKC,UAAU,cACdF,IAAAC,cAAA,MAAIC,UAAU,cAAa,SAK3BF,IAAAC,cAAA,OAAKC,UAAU,2BACdF,IAAAC,cAAA,MAAIC,UAAU,cAAa,+CC6FrBC,MAxGCA,KACd,MAAOC,EAAWC,GAAgBC,mBAAS,KACpCC,EAAUC,GAAeF,mBAAS,IAyCzC,OACEN,IAAAC,cAAA,OAAKC,UAAU,cACbF,IAAAC,cAAA,OAAKC,UAAU,iBACbF,IAAAC,cAAA,WACGM,EAASE,IAAI,CAACC,EAASC,IACtBX,IAAAC,cAAA,OACEW,IAAKD,EACLE,MAAO,CAAEC,UAAWJ,EAAQK,OAAS,QAAU,QAE/Cb,UAAYQ,EAAQK,OAAS,kCAAoC,kCAEjEf,IAAAC,cAAA,SAAIS,EAAQM,UASpBhB,IAAAC,cAAA,OAAKC,UAAU,4BACXF,IAAAC,cAAA,OAAKC,UAAU,eACbF,IAAAC,cAAA,SACEgB,KAAK,OACLf,UAAU,qBACVgB,YAAY,kBACZC,aAAW,8CACXC,MAAOhB,EACPiB,SAAWC,GAAMjB,EAAaiB,EAAEC,OAAOH,SAEzCpB,IAAAC,cAAA,UACEC,UAAU,kDACVe,KAAK,SACLO,QAvEQC,UAClBjB,EAAakB,GAAiB,IACzBA,EACH,CAAEV,KAAMZ,EAAWW,QAAQ,KAE7B,IACE,MAcMY,SAdiBC,IAAMC,KAC3B,wCACA,CACEC,MAAO,yBACPC,OAAQ3B,EACR4B,WAAY,KAEd,CACEC,QAAS,CACPC,eAAgB,mBAChBC,cAAa,UAAAC,OAlBR,2DAsBYC,KAAKC,QAAQ,GAAGtB,KAAKuB,OAC5C/B,EAAakB,GAAiB,IACzBA,EACH,CAAEV,KAAMW,EAAOZ,QAAQ,KAEzB,MAAOyB,GACPC,QAAQD,MAAM,mCAAoCA,GAClDhC,EAAakB,GAAiB,IACzBA,EACH,CACEV,KAAM,gDACND,QAAQ,KAIdV,EAAa,MAqCJ,QAIDL,IAAAC,cAAA,UACEC,UAAU,6CACVe,KAAK,SACLyB,GAAG,OACJ,WCrEEC,MAXf,WACE,OACE3C,IAAAC,cAAA,OAAKC,UAAU,QACfF,IAAAC,cAACF,EAAG,MAGJC,IAAAC,cAACE,EAAO,QCJGyC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAAzB,EAAA,GAAA0B,KAAAD,EAAAE,KAAA,UAAqBD,KAAKE,IAAiD,IAAhDC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASL,EACpEC,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH5D,IAAAC,cAACD,IAAM6D,WAAU,KACf7D,IAAAC,cAAC0C,EAAG,QAORC","file":"static/js/main.825a0cce.chunk.js","sourcesContent":["import React from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\n\r\nfunction Top (){\r\n\r\n    return(\r\n<div className=\"continer \">\r\n    <div className=\"header\">\r\n       \r\n       <div className=\"hlogo p-3 \">\r\n        <h1 className=\"text-white\">LOGO</h1>\r\n        </div>\r\n\r\n\r\n\r\n        <div className=\"hwelcom text-center p-3\" >\r\n         <h1 className=\"text-white\">Welcom to O-Media Chatbot</h1>\r\n        </div>\r\n\r\n\r\n    </div>\r\n\r\n</div>\r\n    )\r\n}\r\n\r\nexport default Top ;","import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"./chatbot.css\";\r\n\r\nconst ChatBot = () => {\r\n  const [userInput, setUserInput] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  const apiKey = \"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\"; // استبدل YOUR_OPENAI_API_KEY بمفتاح API الخاص بك\r\n\r\n  const sendMessage = async () => {\r\n    setMessages((prevMessages) => [\r\n      ...prevMessages,\r\n      { text: userInput, isUser: true },\r\n    ]);\r\n    try {\r\n      const response = await axios.post(\r\n        \"https://api.openai.com/v1/completions\",\r\n        {\r\n          model: \"gpt-3.5-turbo-instruct\",\r\n          prompt: userInput,\r\n          max_tokens: 150,\r\n        },\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${apiKey}`,\r\n          },\r\n        }\r\n      );\r\n      const reply = response.data.choices[0].text.trim();\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { text: reply, isUser: false },\r\n      ]);\r\n    } catch (error) {\r\n      console.error(\"Error sending message to OpenAI:\", error);\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        {\r\n          text: \"Error occurred while processing your request.\",\r\n          isUser: false,\r\n        },\r\n      ]);\r\n    }\r\n    setUserInput(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"msarea p-4\">\r\n      <div className=\"mascont  mt-5\">\r\n        <div> \r\n          {messages.map((message, index) => (\r\n            <div\r\n              key={index}\r\n              style={{ textAlign: message.isUser ? \"right\" : \"left\" }}\r\n              // className=\"alert alert-dark  m-2\"\r\n              className={ message.isUser ? \"alert alert-dark text-right m-2\" : \"m-2 alert alert-info text-left\" }\r\n            >\r\n              <p>{message.text}</p>\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n\r\n\r\n        \r\n      </div>\r\n      <div className=\"msinput m-auto mt-2 w-50\">\r\n          <div className=\"input-group\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control input\"\r\n              placeholder=\"Enter Your Text\"\r\n              aria-label=\"Recipient's username with two button addons\"\r\n              value={userInput}\r\n              onChange={(e) => setUserInput(e.target.value)}\r\n            />\r\n            <button\r\n              className=\"btn btn-outline-secondary bg-success text-white\"\r\n              type=\"button\"\r\n              onClick={sendMessage}\r\n            >\r\n              Send\r\n            </button>\r\n\r\n            <button\r\n              className=\"btn btn-outline-info bg-success text-white\"\r\n              type=\"button\"\r\n              id=\"rec\"\r\n            >\r\n              REC\r\n            </button>\r\n          </div>\r\n        </div>\r\n      {/* <input\r\n        type=\"text\"\r\n        value={userInput}\r\n        onChange={(e) => setUserInput(e.target.value)}\r\n        placeholder=\"Type your message...\"\r\n      />\r\n      <button className=\"btn btn-secondary\" onClick={sendMessage}>Send</button> */}\r\n\r\n      \r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatBot;\r\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Top from './Components/Top';\nimport ChatBot from './Components/ChatBot';\n// import Massagecon from './Components/Massagecon';\n\n\n\n\nfunction App() {\n  return (\n    <div className='body'>\n    <Top></Top>\n    {/* <Massagecon></Massagecon> */}\n    \n    <ChatBot></ChatBot>\n       </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}